plugins {
    id 'org.springframework.boot'
}
jar {
    enabled = false
}

processResources {
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
}

bootJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    archiveFileName = "mch_asset_viewer_app-${jarVersion}.jar"
    manifest {
        attributes 'Implementation-Title': 'MCH Asset Viewer App'
        attributes 'Implementation-Version': jarVersion
        attributes 'Implementation-Vendor-Id': appVendor
    }
}
dependencies {
    api project(':mch-common-reactor-api')

    /************** PROD dependencies **************/
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation "io.jsonwebtoken:jjwt:${jsonwebtokenVersion}"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'com.amazonaws:aws-java-sdk-sts'
    implementation "javax.xml.bind:jaxb-api:${xmlVersion}"

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'com.h2database:h2'

    /************** BUILD dependencies **************/
    compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    compileOnly "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task versionTxt() {
    doLast {
        new File(parent.projectDir, "version.txt").text = "$jarVersion"
    }
}

tasks.named("build") { finalizedBy("versionTxt") }